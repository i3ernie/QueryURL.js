const t={queries:[],alias:{},ignore:[],prefix:"",types:{}},e=function(t,e){return"integer"===e?parseInt(t):"number"===e?parseFloat(t):t},i=function(e,i){"string"==typeof e?this.url=new URL(e):(this.url=new URL(document.location.href),i=e),i&&(this.options=Object.assign({},t),"object"==typeof i.queries&&(this.options.queries=i.queries),"object"==typeof i.alias&&(this.options.alias=i.alias),"string"==typeof i.prefix&&(this.options.prefix=i.prefix),"object"==typeof i.types&&(this.options.types=i.types),"object"==typeof i.ignore&&(this.options.ignore=i.ignore))};i.prototype=Object.assign(Object.create(i.prototype),{setQueries:function(t){this.options.queries=t},setType:function(t,e){},setPrefix:function(t){"string"==typeof t&&(this.options.prefix=t)},addQuery:function(){},addAlias:function(t,e){this.options.alias[t]||(this.options.alias[t]=[]),"string"==typeof e&&this.options.alias[t].push(e)},getAll:function(){let t,e,i={};for(let s=0;s<this.options.queries.length;s++)t=this.options.queries[s],e=this.getQuery(t),e&&(i[t]=e);return i},getQuery:function(t){let e=this.url.searchParams;if("string"!=typeof t)return console.error("Failed execute 'getQuery': 1 argument type of 'string' required"),null;let i=this.options.alias[t];if(i){let s=null;for(let t=0;t<i.length;t++)if(this.options.ignore.indexOf(i[t])<0&&e.has(i[t])){s=e.getAll(i[t]);break}if(s)return this._parse(t,s)}return this.options.ignore.indexOf(this.options.prefix+t)<0&&e.has(this.options.prefix+t)?this._parse(t,e.getAll(this.options.prefix+t)):this.options.ignore.indexOf(t)<0&&e.has(t)?this._parse(t,e.getAll(t)):null},_parse:function(t,i){if(1===i.length){if(i=i[0],this.options.types[t])return e(i,this.options.types[t])}else if(this.options.types[t])for(let s=0;s<i.length;s++)i[s]=e(i,this.options.types[t]);return i}});export default i;export{i as QueryURL};
//# sourceMappingURL=QueryURL.es.min.js.map
