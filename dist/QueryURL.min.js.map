{"version":3,"file":"QueryURL.min.js","sources":["../src/QueryURL.es.js"],"sourcesContent":["const defaults = {\n    queries : [],\n    alias : {},\n    ignore : [],\n\n    prefix : \"\",\n\n    types : {\n    } \n};\n\nconst __typeCast = function( str, type ){\n\n    if ( type === \"integer\") {\n        return parseInt( str );\n    }\n\n    if ( type === \"number\") {\n        return parseFloat( str );\n    }\n\n    if ( type === \"plainJSON\" ) {\n        let ret = str;\n\n        try {\n            let res = {};\n            str.split( ',' ).forEach( function ( el ) { \n                let q = el.split( ':' );\n                \n                res[ q[0] ] = q[1];\n                \n            } );\n            ret = res;\n        } catch ( e ) {\n            console.error( \"ERROR in Parameter \" + str + \": \" + type, e );\n        }\n        return ret;\n    }\n\n    if ( type === \"list\" ) {\n        let ret = str;\n\n        try {\n            let res = [];\n\n            str.split( ',' ).forEach( function ( el ) {     \n                res.push( el );\n            } );\n            \n            ret = res;\n        } catch ( e ) {\n            console.error( \"ERROR in Parameter \" + str + \": \" + type, e );\n        }\n        return ret;\n    }\n\n    return str;\n};\n\nconst QueryURL = function( urlStr, opts ) {\n\n    if ( typeof urlStr === \"string\") {\n        this.url = new URL( urlStr );\n        \n    } else {\n        this.url = new URL( document.location.href );\n        opts = urlStr;\n    }\n\n    if ( !opts ) return;\n\n    this.options = Object.assign( {}, defaults );\n\n    if ( typeof opts.queries === \"object\" ) {\n        this.options.queries = opts.queries;\n    }\n    if ( typeof opts.alias === \"object\" ) {\n        this.options.alias = opts.alias;\n    }\n    if ( typeof opts.prefix === \"string\" ) {\n        this.options.prefix = opts.prefix;\n    }\n    if ( typeof opts.types === \"object\" ) {\n        this.options.types = opts.types;\n    }\n    if ( typeof opts.ignore === \"object\" ) {\n        this.options.ignore = opts.ignore;\n    }\n};\n\nQueryURL.prototype = Object.assign( Object.create( QueryURL.prototype ), {\n\n    setQueries : function( queries ) {\n        this.options.queries = queries;\n    },\n\n    setType : function( param, type ){\n        this.options.types[param] = type;\n    },\n\n    setPrefix : function( pref ){\n        if ( typeof pref === \"string\" ) {\n            this.options.prefix = pref;\n        }\n    },\n\n    addQuery : function(){\n\n    },\n\n    addAlias : function( param, alias) {\n\n        if ( !this.options.alias[param] ) {\n            this.options.alias[param] = [];\n        }\n        if ( typeof alias === \"string\" ) {\n            this.options.alias[param].push( alias );\n        }\n\n    },\n\n    getAll : function( ) {\n        \n        let ret = {};\n\n        let qry, val;\n\n        for ( let i = 0; i < this.options.queries.length; i++ ) {\n            qry = this.options.queries[i];\n            val = this.getQuery( qry );\n            if ( val ) {\n                ret[ qry ] = val;\n            }\n        }\n\n        return ret;\n    },\n\n    getQuery : function( qry ) {\n        let params = this.url.searchParams;\n\n\n        if ( typeof qry !== \"string\" ) {\n            console.error( \"Failed execute 'getQuery': 1 argument type of 'string' required\" );\n            return null;\n        }\n\n        let alias = this.options.alias[qry];\n        if ( alias ) {\n\n            let res = null;\n            for ( let i = 0; i < alias.length; i++ ) {\n                \n                if( this.options.ignore.indexOf( alias[i] ) < 0 && params.has( alias[i] ) ) { \n                    res =  params.getAll( alias[i] );\n                    break;\n                    \n                }\n            }\n            if (res) return this._parse( qry, res ); \n        }\n\n        if ( this.options.ignore.indexOf( this.options.prefix + qry ) < 0 && params.has( this.options.prefix + qry) ) {          \n            return this._parse( qry, params.getAll( this.options.prefix + qry ) ); \n        }\n        \n        if( this.options.ignore.indexOf( qry ) < 0 && params.has( qry ) ) {             \n            return this._parse( qry, params.getAll( qry ) ); \n        }\n\n        return null;\n    },\n\n    _parse : function( qry, res ) {\n\n        if( res.length === 1) {\n            res = res[0];\n\n            if ( this.options.types[ qry ] )\n            {\n                return __typeCast( res, this.options.types[ qry ] );\n            }\n\n        } else {\n\n            if ( this.options.types[ qry ] )\n            {\n                for ( let i = 0; i < res.length; i++ ) {\n                    res[i] = __typeCast( res, this.options.types[ qry ] )\n                }\n            }\n            \n        }\n\n        return res;\n    }\n});\n\nexport default QueryURL;\nexport { QueryURL };"],"names":["defaults","queries","alias","ignore","prefix","types","__typeCast","str","type","parseInt","parseFloat","ret","res","split","forEach","el","q","e","console","error","push","QueryURL","urlStr","opts","this","url","URL","document","location","href","options","Object","assign","prototype","create","setQueries","setType","param","setPrefix","pref","addQuery","addAlias","getAll","qry","val","i","length","getQuery","params","searchParams","indexOf","has","_parse"],"mappings":"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"}